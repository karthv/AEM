// Function to download SCORM zip package from server
function downloadSCORMPackage(url) {
  return new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'blob';

    xhr.onload = function() {
      if (xhr.status === 200) {
        resolve(xhr.response);
      } else {
        reject(new Error('Failed to download SCORM package'));
      }
    };

    xhr.onerror = function() {
      reject(new Error('Failed to download SCORM package'));
    };

    xhr.send();
  });
}

// Function to extract SCORM package in the browser
function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob).then(function(zip) {
      // Assuming SCORM package contains multiple files
      // You can access individual files using zip.file() and process them as needed

      // Example: Extracting all files to a directory
      zip.forEach((relativePath, zipEntry) => {
        if (!zipEntry.dir) {
          zipEntry.async('blob').then((content) => {
            // Process individual file content here
            console.log('Extracted file:', relativePath);
          });
        }
      });

      resolve(zip); // Return the zip object
    }).catch(function(error) {
      reject(error);
    });
  });
}

// Function to find the launch file of the SCORM package from the zip object
function findLaunchFile(zip) {
  return new Promise((resolve, reject) => {
    // Get the manifest file from the zip object
    var manifestFile = zip.file('imsmanifest.xml');
    if (manifestFile) {
      // Parse the manifest file as XML
      manifestFile.async('text').then(function(xml) {
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(xml, 'text/xml');
        // Find the resource element with the scormtype attribute set to 'sco'
        var resource = xmlDoc.querySelector('resource[adlcp\\:scormtype="sco"]');
        if (resource) {
          // Get the value of the href attribute of the resource element
          var launchFile = resource.getAttribute('href');
          if (launchFile) {
            // Return the launch file name
            resolve(launchFile);
          } else {
            reject(new Error('No launch file found in the manifest file'));
          }
        } else {
          reject(new Error('No resource element with scormtype="sco" found in the manifest file'));
        }
      }).catch(function(error) {
        reject(error);
      });
    } else {
      reject(new Error('No manifest file found in the zip object'));
    }
  });
}

// Function to load the launch file URL in an iframe or a new window
function loadLaunchFile(launchFileUrl, searchString, customApiKey, customApiValue) {
  // Create an iframe element
  var iframe = document.createElement('iframe');
  // Set the src attribute of the iframe with the launch file URL and the query parameters
  iframe.src = launchFileUrl + searchString + '&' + customApiKey + '=' + customApiValue;
  // Append the iframe to the document body
  document.body.appendChild(iframe);
}

// Function to handle the button click event
function handleButtonClick() {
  var scormUrl = 'http://example.com/scorm_package.zip';

  // Define the search string and the custom API key/value pair
  var searchString = '?embedded=true';
  var customApiKey = 'SomeCustomKey';
  var customApiValue = 'SomeCustomValue';

  downloadSCORMPackage(scormUrl)
    .then(blob => extractSCORMPackage(blob))
    .then(zip => findLaunchFile(zip))
    .then(launchFile => {
      // Get the blob object of the launch file
      var launchFileBlob = zip.file(launchFile).async('blob');
      // Create a URL for the launch file
      var launchFileUrl = URL.createObjectURL(launchFileBlob);
      // Load the launch file URL in an iframe or a new window
      loadLaunchFile(launchFileUrl, searchString, customApiKey, customApiValue);
    })
    .then(() => {
      console.log('SCORM package downloaded, extracted, and loaded successfully.');
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

function getLaunchFileUrl(zip, launchFile) {
  return new Promise((resolve, reject) => {
    // Get the blob object of the launch file
    zip.file(launchFile).async('blob').then(function(launchFileBlob) {
      // Create a URL for the launch file
      var launchFileUrl = URL.createObjectURL(launchFileBlob);
      resolve(launchFileUrl);
    }).catch(function(error) {
      reject(error);
    });
  });
}


function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob).then(function(zip) {
      let promises = [];

      // Array to store all extracted files
      let extractedFiles = [];

      // Extracting all files to a directory
      zip.forEach((relativePath, zipEntry) => {
        if (!zipEntry.dir) {
          // Pushing the promise of each extracted file to the promises array
          let promise = zipEntry.async('blob').then((content) => {
            // Process individual file content here
            console.log('Extracted file:', relativePath);
            // Store the extracted file
            extractedFiles.push({ path: relativePath, content: content });
          });
          promises.push(promise);
        }
      });

      // Waiting for all promises to resolve
      Promise.all(promises).then(() => {
        // Resolve the Promise with the zip object and extracted files
        resolve({ zip: zip, files: extractedFiles });
      }).catch((error) => {
        reject(error);
      });
    }).catch(function(error) {
      reject(error);
    });
  });
}

