// Function to download SCORM zip package from server
function downloadSCORMPackage(url) {
  return new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'blob';

    xhr.onload = function() {
      if (xhr.status === 200) {
        resolve(xhr.response);
      } else {
        reject(new Error('Failed to download SCORM package'));
      }
    };

    xhr.onerror = function() {
      reject(new Error('Failed to download SCORM package'));
    };

    xhr.send();
  });
}

// Function to extract SCORM package in the browser
function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob).then(function(zip) {
      // Assuming SCORM package contains multiple files
      // You can access individual files using zip.file() and process them as needed

      // Example: Extracting all files to a directory
      zip.forEach((relativePath, zipEntry) => {
        if (!zipEntry.dir) {
          zipEntry.async('blob').then((content) => {
            // Process individual file content here
            console.log('Extracted file:', relativePath);
          });
        }
      });

      resolve(zip); // Return the zip object
    }).catch(function(error) {
      reject(error);
    });
  });
}

// Function to find the launch file of the SCORM package from the zip object
function findLaunchFile(zip) {
  return new Promise((resolve, reject) => {
    // Get the manifest file from the zip object
    var manifestFile = zip.file('imsmanifest.xml');
    if (manifestFile) {
      // Parse the manifest file as XML
      manifestFile.async('text').then(function(xml) {
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(xml, 'text/xml');
        // Find the resource element with the scormtype attribute set to 'sco'
        var resource = xmlDoc.querySelector('resource[adlcp\\:scormtype="sco"]');
        if (resource) {
          // Get the value of the href attribute of the resource element
          var launchFile = resource.getAttribute('href');
          if (launchFile) {
            // Return the launch file name
            resolve(launchFile);
          } else {
            reject(new Error('No launch file found in the manifest file'));
          }
        } else {
          reject(new Error('No resource element with scormtype="sco" found in the manifest file'));
        }
      }).catch(function(error) {
        reject(error);
      });
    } else {
      reject(new Error('No manifest file found in the zip object'));
    }
  });
}

// Function to load the launch file URL in an iframe or a new window
function loadLaunchFile(launchFileUrl, searchString, customApiKey, customApiValue) {
  // Create an iframe element
  var iframe = document.createElement('iframe');
  // Set the src attribute of the iframe with the launch file URL and the query parameters
  iframe.src = launchFileUrl + searchString + '&' + customApiKey + '=' + customApiValue;
  // Append the iframe to the document body
  document.body.appendChild(iframe);
}

// Function to handle the button click event
function handleButtonClick() {
  var scormUrl = 'http://example.com/scorm_package.zip';

  // Define the search string and the custom API key/value pair
  var searchString = '?embedded=true';
  var customApiKey = 'SomeCustomKey';
  var customApiValue = 'SomeCustomValue';

  downloadSCORMPackage(scormUrl)
    .then(blob => extractSCORMPackage(blob))
    .then(zip => findLaunchFile(zip))
    .then(launchFile => {
      // Get the blob object of the launch file
      var launchFileBlob = zip.file(launchFile).async('blob');
      // Create a URL for the launch file
      var launchFileUrl = URL.createObjectURL(launchFileBlob);
      // Load the launch file URL in an iframe or a new window
      loadLaunchFile(launchFileUrl, searchString, customApiKey, customApiValue);
    })
    .then(() => {
      console.log('SCORM package downloaded, extracted, and loaded successfully.');
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

function getLaunchFileUrl(zip, launchFile) {
  return new Promise((resolve, reject) => {
    // Get the blob object of the launch file
    zip.file(launchFile).async('blob').then(function(launchFileBlob) {
      // Create a URL for the launch file
      var launchFileUrl = URL.createObjectURL(launchFileBlob);
      resolve(launchFileUrl);
    }).catch(function(error) {
      reject(error);
    });
  });
}


function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob).then(function(zip) {
      let promises = [];

      // Array to store all extracted files
      let extractedFiles = [];

      // Extracting all files to a directory
      zip.forEach((relativePath, zipEntry) => {
        if (!zipEntry.dir) {
          // Pushing the promise of each extracted file to the promises array
          let promise = zipEntry.async('blob').then((content) => {
            // Process individual file content here
            console.log('Extracted file:', relativePath);
            // Store the extracted file
            extractedFiles.push({ path: relativePath, content: content });
          });
          promises.push(promise);
        }
      });

      // Waiting for all promises to resolve
      Promise.all(promises).then(() => {
        // Resolve the Promise with the zip object and extracted files
        resolve({ zip: zip, files: extractedFiles });
      }).catch((error) => {
        reject(error);
      });
    }).catch(function(error) {
      reject(error);
    });
  });
}





function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob)
      .then((zip) => {
        // Handle potential errors within forEach loop
        zip.forEach((relativePath, zipEntry) => {
          if (!zipEntry.dir) {
            zipEntry.async('blob')
              .then((content) => {
                // Process individual file content here
                console.log('Extracted file:', relativePath);
              })
              .catch((error) => {
                // Handle errors during individual file processing
                console.error('Error processing file:', relativePath, error);
                reject(error);
              });
          }
        });

        // Resolve with the zip object only after all files have been processed
        return Promise.all(zip.files.map((file) => file.async('blob')));
      })
      .then(() => zip) // Resolve with zip object after successful file processing
      .catch((error) => {
        console.error('Error during SCORM package extraction:', error);
        reject(error);
      });
  });
}

zip directory handle
**********************

function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob)
      .then((zip) => {
        let promises = [];

        // Handle both files and directories
        zip.forEach((relativePath, zipEntry) => {
          if (!zipEntry.dir) {
            // For files, asynchronously extract the content
            let promise = zipEntry.async('blob')
              .then((content) => {
                // Process individual file content here
                console.log('Extracted file:', relativePath);
                return { relativePath, content }; // Return the extracted content
              })
              .catch((error) => {
                // Handle errors during individual file processing
                console.error('Error processing file:', relativePath, error);
                throw error; // Propagate the error for proper handling
              });

            promises.push(promise);
          }
        });

        // Wait for all promises to resolve
        Promise.all(promises)
          .then((extractedFiles) => {
            // Resolve with the zip object and extracted files
            resolve({ zip: zip, extractedFiles: extractedFiles });
          })
          .catch((error) => {
            reject(error); // Reject with the error caught during file processing
          });
      })
      .catch((error) => {
        console.error('Error during SCORM package extraction:', error);
        reject(error); // Reject with the error caught during loading the ZIP
      });
  });
}


need to check this code,

// Function to download SCORM zip package from server
function downloadSCORMPackage(url) {
  return new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'blob';

    xhr.onload = function() {
      if (xhr.status === 200) {
        resolve(xhr.response);
      } else {
        reject(new Error('Failed to download SCORM package'));
      }
    };

    xhr.onerror = function() {
      reject(new Error('Failed to download SCORM package'));
    };

    xhr.send();
  });
}

// Function to extract SCORM package in the browser
function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob).then(function(zip) {
      // Assuming SCORM package contains multiple files
      // You can access individual files using zip.file() and process them as needed

      // Open the IndexedDB database
      var request = indexedDB.open('scormDB', 1);
      request.onerror = function(event) {
        reject(new Error('Failed to open IndexedDB database'));
      };
      request.onsuccess = function(event) {
        var db = event.target.result;
        var transaction = db.transaction(['scormStore'], 'readwrite');
        var objectStore = transaction.objectStore('scormStore');

        zip.forEach((relativePath, zipEntry) => {
          if (!zipEntry.dir) {
            zipEntry.async('blob').then((content) => {
              // Store individual file content in IndexedDB
              objectStore.put(content, 'scorm/' + relativePath);
            });
          }
        });

        resolve(zip); // Return the zip object
      };
    }).catch(function(error) {
      reject(error);
    });
  });
}

// Function to find the launch file of the SCORM package from IndexedDB
function findLaunchFile() {
  return new Promise((resolve, reject) => {
    var request = indexedDB.open('scormDB', 1);
    request.onerror = function(event) {
      reject(new Error('Failed to open IndexedDB database'));
    };
    request.onsuccess = function(event) {
      var db = event.target.result;
      var transaction = db.transaction(['scormStore'], 'readonly');
      var objectStore = transaction.objectStore('scormStore');

      // Assume manifest file is always present in the "scorm" folder
      var getRequest = objectStore.get('scorm/imsmanifest.xml');
      getRequest.onerror = function(event) {
        reject(new Error('Failed to retrieve manifest file from IndexedDB'));
      };
      getRequest.onsuccess = function(event) {
        var manifestFileContent = getRequest.result;
        if (manifestFileContent) {
          var parser = new DOMParser();
          var xmlDoc = parser.parseFromString(manifestFileContent, 'text/xml');
          // Find the resource element with the scormtype attribute set to 'sco'
          var resource = xmlDoc.querySelector('resource[adlcp\\:scormtype="sco"]');
          if (resource) {
            // Get the value of the href attribute of the resource element
            var launchFile = resource.getAttribute('href');
            if (launchFile) {
              // Retrieve the launch file content from IndexedDB
              var launchFileRequest = objectStore.get('scorm/' + launchFile);
              launchFileRequest.onerror = function(event) {
                reject(new Error('Failed to retrieve launch file from IndexedDB'));
              };
              launchFileRequest.onsuccess = function(event) {
                var launchFileContent = launchFileRequest.result;
                if (launchFileContent) {
                  resolve(launchFileContent);
                } else {
                  reject(new Error('Launch file not found in IndexedDB'));
                }
              };
            } else {
              reject(new Error('No launch file found in the manifest file'));
            }
          } else {
            reject(new Error('No resource element with scormtype="sco" found in the manifest file'));
          }
        } else {
          reject(new Error('No manifest file found in IndexedDB'));
        }
      };
    };
  });
}

// Function to load the launch file content in an iframe or a new window
function loadLaunchFile(launchFileContent, searchString, customApiKey, customApiValue) {
  // Create an iframe element
  var iframe = document.createElement('iframe');
  // Set the srcdoc attribute of the iframe with the launch file content and the query parameters
  iframe.srcdoc = launchFileContent + searchString + '&' + customApiKey + '=' + customApiValue;
  // Append the iframe to the document body
  document.body.appendChild(iframe);
}

// Function to handle the button click event
// Function to handle the button click event
function handleButtonClick() {
  var scormUrl = 'http://example.com/scorm_package.zip';
  var searchString = '?embedded=true';
  var customApiKey = 'SomeCustomKey';
  var customApiValue = 'SomeCustomValue';

  downloadSCORMPackage(scormUrl)
    .then(blob => extractSCORMPackage(blob))
    .then(() => findLaunchFile())
    .then(launchFileContent => {
      loadLaunchFile(launchFileContent, searchString, customApiKey, customApiValue);
      // Initialize the SCORM API here
      Utils.launchSCO();
    })
    .then(() => {
      console.log('SCORM package downloaded, extracted, and loaded successfully.');
    })
    .catch(error => {
      console.error('Error:', error);
    });
}


load the file on demand,

// Function to handle the button click event
function handleButtonClick() {
  var scormUrl = 'http://example.com/scorm_package.zip';

  // Define the search string and the custom API key/value pair
  var searchString = '?embedded=true';
  var customApiKey = 'SomeCustomKey';
  var customApiValue = 'SomeCustomValue';

  downloadSCORMPackage(scormUrl)
    .then(blob => extractSCORMPackage(blob))
    .then(zip => {
      // Load the launch file
      var launchFile = 'imsmanifest.xml'; // Assuming this is the launch file
      return loadFile(zip, launchFile);
    })
    .then(launchFileContent => {
      // Load the launch file content in an iframe or a new window
      loadLaunchFile(launchFileContent, searchString, customApiKey, customApiValue);
    })
    .then(() => {
      console.log('SCORM package downloaded, extracted, and loaded successfully.');
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

// Function to load a file from the SCORM package
function loadFile(zip, relativePath) {
  return new Promise((resolve, reject) => {
    var zipEntry = zip.file(relativePath);
    if (zipEntry) {
      zipEntry.async('blob').then(content => {
        resolve(content);
      }).catch(error => {
        reject(error);
      });
    } else {
      reject(new Error('File not found in SCORM package: ' + relativePath));
    }
  });
}


TEST THIS METHOD

function handleButtonClick(scormUrl) {
  // Define the search string and the custom API key/value pair
  var searchString = '?embedded=true';
  var customApiKey = 'SomeCustomKey';
  var customApiValue = 'SomeCustomValue';

  downloadSCORMPackage(scormUrl)
    .then(blob => extractSCORMPackage(blob))
    .then(zip => findLaunchFile(zip))
    .then(launchFile => {
      // Get the blob object of the launch file
      return zip.file(launchFile).async('blob')
        .then(launchFileBlob => {
          // Create a URL for the launch file
          var launchFileUrl = URL.createObjectURL(launchFileBlob);
          // Load the launch file URL in an iframe or a new window
          loadLaunchFile(launchFileUrl, searchString, customApiKey, customApiValue);
          Utils.launchSCO(launchFileUrl);
        });
    })
    .then(() => {
      console.log('SCORM package downloaded, extracted, and loaded successfully.');
    })
    .catch(error => {
      console.error('Error:', error);
    });
}


-----------------------------------------------------------------------------------------------------------------------------



// Function to download SCORM zip package from server
function downloadSCORMPackage(url) {
  return new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'blob';

    xhr.onload = function() {
      if (xhr.status === 200) {
        resolve(xhr.response);
      } else {
        reject(new Error('Failed to download SCORM package'));
      }
    };

    xhr.onerror = function() {
      reject(new Error('Failed to download SCORM package'));
    };

    xhr.send();
  });
}

function extractSCORMPackage(blob) {
  return new Promise((resolve, reject) => {
    JSZip.loadAsync(blob)
      .then((zip) => {
        let promises = [];

        // Handle both files and directories
        zip.forEach((relativePath, zipEntry) => {
          if (!zipEntry.dir) {
            // For files, asynchronously extract the content
            let promise = zipEntry.async('blob')
              .then((content) => {
                // Process individual file content here
                console.log('Extracted file:', relativePath);
                return { relativePath, content }; // Return the extracted content
              })
              .catch((error) => {
                // Handle errors during individual file processing
                console.error('Error processing file:', relativePath, error);
                throw error; // Propagate the error for proper handling
              });

            promises.push(promise);
          }
        });

        // Wait for all promises to resolve
        Promise.all(promises)
          .then((extractedFiles) => {
            // Resolve with the zip object and extracted files
            resolve({ zip: zip, extractedFiles: extractedFiles });
          })
          .catch((error) => {
            reject(error); // Reject with the error caught during file processing
          });
      })
      .catch((error) => {
        console.error('Error during SCORM package extraction:', error);
        reject(error); // Reject with the error caught during loading the ZIP
      });
  });
}

// Function to find the launch file of the SCORM package from the zip object
function findLaunchFile(zip) {
  return new Promise((resolve, reject) => {
    // Get the manifest file from the zip object
    var manifestFile = zip.zip.file('imsmanifest.xml') 
    if (manifestFile) {
      // Parse the manifest file as XML
      manifestFile.async('text').then(function(xml) {
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(xml, 'text/xml');
        // Find the resource element with the scormtype attribute set to 'sco'
        //var resource = xmlDoc.querySelector('resources').firstElementChild.attributes.getNamedItem('adlcp:scormtype');
          var resource = xmlDoc.querySelector('resources').firstChild;
        if (resource) {
          // Get the value of the href attribute of the resource element
          var launchFile = resource.getAttribute('href');
          if (launchFile) {
            // Return the launch file name
            resolve(launchFile);
          } else {
            reject(new Error('No launch file found in the manifest file'));
          }
        } else {
          reject(new Error('No resource element with scormtype="sco" found in the manifest file'));
        }
      }).catch(function(error) {
        reject(error);
      });
    } else {
      reject(new Error('No manifest file found in the zip object'));
    }
  });
}



// Function to load the launch file content in an iframe or a new window
function loadLaunchFile(launchFileContent, searchString, customApiKey, customApiValue) {
  // Create an iframe element
  var iframe = document.createElement('iframe');
  // Set the srcdoc attribute of the iframe with the launch file content and the query parameters
  iframe.srcdoc = launchFileContent + searchString + '&' + customApiKey + '=' + customApiValue;
  // Append the iframe to the document body
  document.body.appendChild(iframe);
}


function handleButtonClick(scormUrl) {
  var searchString = '?embedded=true';
  var customApiKey = 'SomeCustomKey';
  var customApiValue = 'SomeCustomValue';

  downloadSCORMPackage(scormUrl)
    .then(blob => extractSCORMPackage(blob))
    .then(zip => {
      return findLaunchFile(zip);
    })
    .then(launchFileContent => {
      // Load the launch file content in an iframe or a new window
      loadLaunchFile(launchFileContent, searchString, customApiKey, customApiValue);
 	  Utils.launchSCO(launchFileContent);
    })
    .then(() => {
      console.log('SCORM package downloaded, extracted, and loaded successfully.');
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

------------------------------
-------------------------------

function handleButtonClick(scormUrl) {
  var searchString = '?embedded=true';
  var customApiKey = 'SomeCustomKey';
  var customApiValue = 'SomeCustomValue';

  downloadSCORMPackage(scormUrl)
    .then(blob => extractSCORMPackage(blob))
    .then(zip => {
      return findLaunchFile(zip);
    })
    .then(launchFileContent => {
      // Load the launch file content in an iframe or a new window
      loadLaunchFile(launchFileContent, searchString, customApiKey, customApiValue);

      // Connect and pass the launch file content to Simple API for SCORM 1.2
      SimpleAPI.LMSInitialize(); // Initialize SCORM session
      SimpleAPI.LMSSetValue("cmi.launch_data", launchFileContent); // Set launch data in the SCORM data model

      // Continue with any other interactions or tracking as needed

      console.log('SCORM package downloaded, extracted, and loaded successfully.');
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

